local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Seed_stock = {}
local selectedSeeds = {}
local Gear_stock = {}
local selectedGears = {}
local Sell_seed = CFrame.new(Vector3.new(61.58, 3.00, 0.43)) * CFrame.Angles(0.00, -1.57, 0.00)
local autoBuyEnabled = false
-- event section
local Event_stock = {}
local selectedEventItems = {}
local autoEventBuyEnabled = false
local autoEventTask = nil
-- Auto Fav
local autoFavoriteEnabled = false
-- Run while start game

local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")

Players.LocalPlayer.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)


-- END 

-- MAIN FUNCTION 
local function GetStock(nostock)
    local SeedUI = game:GetService("Players").LocalPlayer.PlayerGui.Seed_Shop
    local Items = game:GetService("Players").LocalPlayer.PlayerGui.Seed_Shop.Frame.ScrollingFrame
    local ListItem = {}
    for _, item in next, Items:GetChildren() do
         
        local main_frame = item:FindFirstChild("Main_Frame")
        if not main_frame then continue end
        
        local StockText = main_frame.Stock_Text.Text
        
        local stock_count = tonumber(StockText:match("%d+"))
        if stock_count == nil then continue end
        
        if nostock then
            if stock_count <= 0 then continue end
            ListItem[item.Name] = stock_count
        else
            Seed_stock[item.Name] = stock_count
        end
    end
    return nostock and ListItem or Seed_stock
end
--Count Moonlit [EVENT]
local function CountMoonlitItems()
    local player = game.Players.LocalPlayer
    local backpack = player:WaitForChild("Backpack")

    local count = 0
    for _, item in ipairs(backpack:GetChildren()) do
        if string.find(item.Name, "Moonlit") then
            count += 1
        end
    end
    return count
end
-- GEAR SHOP
local function GetGearShop(nostock)
    local GearUI = game:GetService("Players").LocalPlayer.PlayerGui.Gear_Shop
    local Items = GearUI:FindFirstChild("Item_Size",true).Parent
    local ListGearItem = {}
    for _, item in next, Items:GetChildren() do
         
        local main_frame = item:FindFirstChild("Main_Frame")
        if not main_frame then continue end
        
        local StockText = main_frame.Stock_Text.Text
        
        local stock_gear_count = tonumber(StockText:match("%d+"))
        if stock_gear_count == nil then continue end
        
        if nostock then
            if stock_count <= 0 then continue end
            ListGearItem[item.Name] = stock_gear_count
        else
            Gear_stock[item.Name] = stock_gear_count
        end
    end
    return nostock and ListGearItem or Gear_stock
end
--
local function SellAll()
    game:GetService("ReplicatedStorage").GameEvents.Sell_Inventory:FireServer()
end
-- Teleport SCRIPT 
local function TeleportTo(cframe)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = cframe
    end
end
-- Teleport Back from Sell
local function SellAndReturn()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")
    local originalCFrame = hrp.CFrame

    local sellCFrame = CFrame.new(Vector3.new(61.58, 3.00, 0.43)) * CFrame.Angles(0.00, -1.57, 0.00)
    TeleportTo(sellCFrame)
    wait(0.5)
    SellAll()
    task.wait(0.5)
    TeleportTo(originalCFrame)
end

-- Delete Tree
local function DeleteTree()
   for _, farm in ipairs(workspace.Farm:GetChildren()) do
      local importantFolder = farm:FindFirstChild("Important")
      if importantFolder then
         local plantsFolder = importantFolder:FindFirstChild("Plants_Physical")
         if plantsFolder then
            for _, child in ipairs(plantsFolder:GetChildren()) do
               if child.Name ~= "Fruits" then
                  child:Destroy()
               end
            end
         end
      end
   end
end

-- Buy Seed Script 
local function BuySeed(seed_name:string)
    game:GetService("ReplicatedStorage").GameEvents.BuySeedStock:FireServer(seed_name)
end
-- This script was generated by Hydroxide's RemoteSpy: https://github.com/Upbolt/Hydroxide
-- Buy Gear Script
local function BuyGear(gear_name:string)
   game:GetService("ReplicatedStorage").GameEvents.BuyGearStock:FireServer(gear_name)
end
--Buy Egg Script
local function BuyEgg(egg_name:number)
   game:GetService("ReplicatedStorage").GameEvents.BuyPetEgg:FireServer(egg_name)
end
-- AutoBuy LOGIC
local function WaitUntilNext5MinuteMark()
    local currentTime = os.time()
    local next5Min = math.ceil(currentTime / 300) * 300
    local waitTime = next5Min - currentTime
    print("Waiting " .. waitTime .. " seconds until next 5-minute mark")
    wait(waitTime)
end

local function BuySelectedSeeds()
    local stockTable = GetStock(false)
    
    for _, seedName in pairs(selectedSeeds) do
        local stock = stockTable[seedName]
        if stock and stock > 0 then
            Rayfield:Notify({
                Title = "Buying Seeds",
                Content = "Buying " .. seedName .. " x" .. stock,
                Duration = 4,
            })
            
            local attempts = stock
            for i = 1, attempts do
                BuySeed(seedName)
                task.wait(0.1)
            end
        else
            print("No stock available for: " .. seedName)
        end
    end
end
local autoTask = nil

local function StartAutoBuy()
    if autoTask then return end
    
    autoTask = task.spawn(function()
        while autoBuyEnabled do
            print("Auto Buy is enabled, checking for seeds to buy")
            BuySelectedSeeds()
            print("Waiting for next restock...")
            WaitUntilNext5MinuteMark()
        end
    end)
end

local function StopAutoBuy()
    if autoTask then
        task.cancel(autoTask)
        autoTask = nil
        print("Auto Buy task stopped")
    end
end
-- Gear Auto Buy
local function BuySelectedGears()
    local stockGearTable = GetGearShop(false)
    
    for _, gearName in pairs(selectedGears) do
        local stock = stockGearTable[gearName]
        if stock and stock > 0 then
            Rayfield:Notify({
                Title = "Buying Gears",
                Content = "Buying " .. gearName .. " x" .. stock,
                Duration = 4,
            })
            
            local attempts = stock
            for i = 1, attempts do
                BuyGear(gearName)
                task.wait(0.1) 
            end
        else
            print("No stock available for: " .. gearName)
        end
    end
end
-- task auto fav

local function tryFavorite(item)
	if not (item:IsA("Tool") and (item.Name:find("Moonlit") or item.Name:find("Bloodlit"))) then
		return
	end
	task.wait(0.2)

	local isFavorite = item:GetAttribute("Favorite")
	if not isFavorite then
		game.ReplicatedStorage.GameEvents.Favorite_Item:FireServer(item)
	end
end


local autoGearTask = nil

local function StartAutoBuyGear()
    if autoGearTask then return end 
    
    autoGearTask = task.spawn(function()
        while autoBuyEnabled do
            print("Auto Buy Gear is enabled, checking for gears to buy")
            BuySelectedGears()
            print("Waiting for next gear restock...")
            WaitUntilNext5MinuteMark()
        end
    end)
end

local function StopAutoBuyGear()
    if autoGearTask then
        task.cancel(autoGearTask)
        autoGearTask = nil
        print("Auto Buy Gear task stopped")
    end
end

-- MAIN SCRIPT UI
local Window = Rayfield:CreateWindow({
   Name = "AFK Grow a Garden",
   Icon = 0,
   LoadingTitle = "Script is loading",
   LoadingSubtitle = "by SIMP2712",
   Theme = "Default",
   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = "afktool"
   },
   Discord = {
      Enabled = false, 
      Invite = "noinvitelink", 
      RememberJoins = true 
   },
   KeySystem = false,
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", 
      FileName = "Key",
      SaveKey = true,
      GrabKeyFromSite = false,
      Key = {"Hello"}
   }
})

local Tab = Window:CreateTab("Auto Buy", 4483362458)
local Section = Tab:CreateSection("Config setting")


local stockTable = GetStock(false)
local options = {}

for name, _ in pairs(stockTable) do
   table.insert(options, name)
end

local Dropdown = Tab:CreateDropdown({
   Name = "Select Seed to buy",
   Options = options,
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "seedSelected",
   Callback = function(Options)
      selectedSeeds = Options
      print("Selected seeds updated:", table.concat(Options, ", "))
   end,
})

local Toggle1 = Tab:CreateToggle({
   Name = "Auto Buy",
   CurrentValue = false,
   Flag = "autoBuy",
   Callback = function(Value)
      autoBuyEnabled = Value
      
      if Value then
         Rayfield:Notify({
            Title = "Auto Buy",
            Content = "Enabled â€” Starting auto buy process...",
            Duration = 4,
         })
         StartAutoBuy() 
      else
         Rayfield:Notify({
            Title = "Auto Buy",
            Content = "Disabled",
            Duration = 4,
         })
         StopAutoBuy()
      end
   end,
})

local stockGearShop = GetGearShop(false)
local optionsGear = {}

for name, _ in pairs(stockGearShop) do
   table.insert(optionsGear, name)
end

local DropdownGear = Tab:CreateDropdown({
   Name = "Select gears to buy",
   Options = optionsGear,
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "gearSelected",
   Callback = function(Options)
      selectedGears = Options
      print("Selected gears updated:", table.concat(Options, ", "))
   end,
})

local Toggle3 = Tab:CreateToggle({
   Name = "Auto Buy Gear",
   CurrentValue = false,
   Flag = "autoBuyGear",
   Callback = function(Value)
      autoBuyEnabled = Value
      
      if Value then
         Rayfield:Notify({
            Title = "Auto Buy Gear",
            Content = "Enabled â€” Starting auto buy process...",
            Duration = 4,
         })
         StartAutoBuyGear()
      else
         Rayfield:Notify({
            Title = "Auto Buy",
            Content = "Disabled",
            Duration = 4,
         })
         StopAutoBuyGear()
      end
   end,
})
local Section = Tab:CreateSection("Manual buy")
local Button = Tab:CreateButton({
   Name = "Refresh Seeds",
   Callback = function()
      local stockTable = GetStock(false)
      local options = {}

      for name, _ in pairs(stockTable) do
         table.insert(options, name)
      end

      Dropdown:Refresh(options)
      Rayfield:Notify({
         Title = "Seeds Refreshed",
         Content = "Seed list has been updated",
         Duration = 3,
      })
   end,
})

local Button = Tab:CreateButton({
   Name = "Buy Selected Seeds Now",
   Callback = function()
      BuySelectedSeeds()
   end,
})
local Divider = Tab:CreateDivider()
local Button = Tab:CreateButton({
   Name = "Refresh Gears",
   Callback = function()
      local stockGearTable = GetGearShop(false)
      local optionsGear = {}

      for name, _ in pairs(stockGearTable) do
         table.insert(optionsGear, name)
      end

      DropdownGear:Refresh(optionsGear)
      Rayfield:Notify({
         Title = "Gears Refreshed",
         Content = "Gear list has been updated",
         Duration = 3,
      })
   end,
})

local Button = Tab:CreateButton({
   Name = "Buy Selected Gears Now",
   Callback = function()
      BuySelectedGears()
   end,
})

local Divider = Tab:CreateDivider()

local Button = Tab:CreateButton({
   Name = "Teleport to Seller",
   Callback = function()
      SellAndReturn()
   end,
})
local Button = Tab:CreateButton({
   Name = "Instant Give (E)",
   Callback = function()
      for i,v in ipairs(game:GetService("Workspace"):GetDescendants()) do
         if v.ClassName == "ProximityPrompt" then
         v.HoldDuration = 0
         end
      end
    
   end,
})

local Divider = Tab:CreateDivider()
local Tab2 = Window:CreateTab("Event", "align-left")
local section2 = Tab2:CreateSection("Moonlit Count")
local LabelMoonCount = Tab2:CreateLabel(tostring(CountMoonlitItems()) .. " Moonlit" ,  "citrus", Color3.fromRGB(255, 255, 255), false)

local Button = Tab2:CreateButton({
   Name = "Count Moonlit",
   Callback = function()
      LabelMoonCount:Set(tostring(CountMoonlitItems()) .. " Moonlit")
   end,
})


local ButtonSubmitMoonlit = Tab2:CreateButton({
   Name = "Submit All Moonlit",
   Callback = function()
      game:GetService("ReplicatedStorage").GameEvents.NightQuestRemoteEvent:FireServer("SubmitAllPlants")
   end
})

local ButtonFavMoonlit = Tab2:CreateButton({
   Name = "Fav",
   Callback = function()
     for _, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
         if v:IsA("Tool") and v.Name:find("Moonlit") or v.Name:find("Bloodlit")  then
            game.ReplicatedStorage.GameEvents.Favorite_Item:FireServer(v)
         end
      end
      Rayfield:Notify({
         Title = "Fav All moon plant now",
         Content = "Fav list has been updated",
         Duration = 3,
      })
   end

})
local Toggle2 = Tab2:CreateToggle({
	Name = "Auto-Favorite Bloodlit/Moonlit Tools",
	CurrentValue = false,
	Flag = "AutoFavoriteToggle",
	Callback = function(Value)
		autoFavoriteEnabled = Value

		if autoFavoriteEnabled then
			for _, v in ipairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
				tryFavorite(v)
			end
		end
	end,
})
Toggle2:Set(false)

game.Players.LocalPlayer.Backpack.ChildAdded:Connect(function(child)
	task.wait(0.2)
	if autoFavoriteEnabled then
		tryFavorite(child)
	end
end)

local Tab3 = Window:CreateTab("Misc", "align-left")
local section3 = Tab3:CreateSection("Boost FPS")

local Button = Tab3:CreateButton({ 
   Name = "Remove All Tree",
   Callback = function()
      DeleteTree()
   end,
})
 --debug script
print(CountMoonlitItems())
-- Second Tab


